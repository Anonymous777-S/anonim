import json
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup, FSInputFile
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

TOKEN = "7368964766:AAF-oceL5UfGT37FG2Sb1wipweOio8CoW0c" 
ADMIN_ID = 8079658819

bot = Bot(token=TOKEN)
dp = Dispatcher()

from aiogram.types import BotCommand

# –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –º–µ–Ω—é –∫–æ–º–∞–Ω–¥
async def set_bot_commands(bot: Bot):
    commands = [
        BotCommand(command="start", description="–ó–∞–ø—É—Å—Ç–∏—Ç–∏ –±–æ—Ç–∞ üöÄ")
    ]
    await bot.set_my_commands(commands)

# –°—Ç–∞–Ω–∏ –¥–ª—è –∑–±–æ—Ä—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó
class OrderState(StatesGroup):
    name = State()   # –ü–Ü–ë
    email = State()  # Email
    phone = State()  # –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É

# –ö–Ω–æ–ø–∫–∞ –¥–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –Ω–æ–º–µ—Ä–∞
phone_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìû –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–æ–º–µ—Ä", request_contact=True)]
    ],
    resize_keyboard=True,
    one_time_keyboard=True
)

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(CommandStart())
async def start(message: types.Message, state: FSMContext):
    await message.answer("–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω—è –≤–≤–µ–¥—ñ—Ç—å —Å–≤—ñ–π –ü–Ü–ë:")
    await state.set_state(OrderState.name)

# –û—Ç—Ä–∏–º—É—î–º–æ –ü–Ü–ë
@dp.message(OrderState.name)
async def get_name(message: types.Message, state: FSMContext):
    name = message.text.strip()
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î —Ö–æ—á–∞ –± 2 —Å–ª–æ–≤–∞
    if len(name.split()) < 2:
        await message.answer("‚ö†Ô∏è –í–≤–µ–¥–∏ –ø–æ–≤–Ω–µ —ñ–º'—è (–ü—Ä—ñ–∑–≤–∏—â–µ –Ü–º'—è –∞–±–æ –ü—Ä—ñ–∑–≤–∏—â–µ –Ü–º'—è –ü–æ –±–∞—Ç—å–∫–æ–≤—ñ).")
        return
    
    await state.update_data(name=name)
    await message.answer("–í–≤–µ–¥—ñ—Ç—å —Å–≤–æ—é –µ–ª–µ–∫—Ç—Ä–æ–Ω—É –ø–æ—à—Ç—É (email)")
    await state.set_state(OrderState.email)

# –û—Ç—Ä–∏–º—É—î–º–æ Email
@dp.message(OrderState.email)
async def get_email(message: types.Message, state: FSMContext):
    email = message.text.strip()

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ email
    if "@" not in email or "." not in email or " " in email:
        await message.answer("‚ö†Ô∏è –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç email. –í–≤–µ–¥–∏ –∫–æ—Ä–µ–∫—Ç–Ω–∏–π email (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, example@gmail.com).")
        return

    await state.update_data(email=email)
    await message.answer("–ù–∞–¥—ñ—à–ª–∏ —Å–≤—ñ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –∫–Ω–æ–ø–∫–æ—é –Ω–∏–∂—á–µ:", reply_markup=phone_kb)
    await state.set_state(OrderState.phone)

# –û—Ç—Ä–∏–º—É—î–º–æ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É
@dp.message(OrderState.phone)
async def get_phone(message: types.Message, state: FSMContext):
    if not message.contact:
        await message.answer("‚ö†Ô∏è –ù–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É, —â–æ–± –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É.")
        return

    phone = message.contact.phone_number
    data = await state.get_data()
    data['phone'] = phone

    # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ JSON
    with open("orders.json", "a", encoding="utf-8") as file:
        json.dump(data, file, ensure_ascii=False, indent=4)
        file.write(",\n")

    await message.answer("‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∏–π–Ω—è—Ç–æ! –î—è–∫—É—î–º–æ!", reply_markup=types.ReplyKeyboardRemove())
    
    # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª—É –∞–¥–º—ñ–Ω—É
    await bot.send_document(ADMIN_ID, FSInputFile("orders.json"))

    await state.clear()  # –û—á–∏—â–µ–Ω–Ω—è —Å—Ç–∞–Ω—É

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

async def main():
    await set_bot_commands(bot)  # –î–æ–¥–∞—î –∫–Ω–æ–ø–∫—É –≤ –º–µ–Ω—é
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())


